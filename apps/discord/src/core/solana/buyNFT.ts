import * as anchor from '@project-serum/anchor';
import axios from 'axios';
import { newConnection } from './connection';
import solanaConfig from '../../config/solana.config';
import { getUserWallet } from './getUserWallet';

export async function buyNFT(config: {
  auctionHouseAddress: string;
  tokenMint: string;
  tokenATA: string;
  seller: string;
  sellerReferral: string;
  price: number;
}) {
  const {
    auctionHouseAddress,
    tokenMint,
    tokenATA,
    seller,
    price,
    sellerReferral,
  } = config;

  // Connect to cluster and import wallet to work with
  const conn = newConnection();
  const wallet = getUserWallet(solanaConfig.wallet.secretKey);

  // Airdrop one SOL to wallet (dev network only!!)
  // await conn.requestAirdrop(wallet.publicKey, web3.LAMPORTS_PER_SOL);

  // Create network and wallet context for easy transactions
  const provider = new anchor.AnchorProvider(
    conn, // Cluster connection where the program is deployed
    wallet, // Wallet used to pay for and sign all transactions
    anchor.AnchorProvider.defaultOptions(),
  );

  // Get buy instruction from MagicEden
  const response = await axios.get(
    `${solanaConfig.magiceden.baseUrl}/instructions/buy_now`,
    {
      params: {
        buyer: wallet.publicKey.toBase58(),
        seller,
        auctionHouseAddress,
        tokenMint,
        tokenATA,
        price,
        sellerReferral,
        sellerExpiry: -1,
      },
      headers: {
        // Authorization: `Bearer ${'eyJsYXN0QWN0aXZlIjoxNjUzNDAwNzk3NDI2LCJzZXNzaW9uSWQiOiJyd053dDhBYWxrZHZoY3VuT3F0N3YifQ==.609c31f22c3c75d3a212d99c230b01fc25f16c8b3ce493e61c16232148ccdd6e'}`,

        // Replicate headers of client in browser, until I get a proper authoriziation token
        ['cache-control']: 'no-cache',
        origin: 'https://magiceden.io',
        pragma: 'no-cache',
        referer: 'https://magiceden.io/',
        ['sec-fetch-dest']: 'empty',
        ['sec-fetch-mode']: 'cors',
        ['sec-fetch-site']: 'same-site',
        ['sec-gpc']: 1,
        ['user-agent']:
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36',
      },
    },
  );

  // const response = {
  //   data: {
  //     tx: {
  //       type: 'Buffer',
  //       data: [
  //         1, 0, 10, 21, 123, 187, 201, 72, 90, 130, 225, 124, 191, 62, 91, 50,
  //         208, 50, 122, 180, 112, 176, 28, 78, 207, 240, 74, 119, 215, 51, 13,
  //         137, 200, 133, 224, 94, 208, 146, 192, 147, 72, 35, 88, 51, 253, 232,
  //         207, 29, 209, 159, 176, 124, 253, 186, 119, 218, 146, 118, 237, 87, 4,
  //         152, 7, 2, 58, 64, 6, 168, 227, 214, 7, 109, 105, 18, 113, 26, 107,
  //         82, 42, 67, 123, 134, 189, 15, 185, 205, 209, 18, 210, 200, 70, 223,
  //         5, 206, 37, 77, 97, 186, 35, 253, 84, 171, 220, 1, 64, 113, 155, 43,
  //         241, 243, 143, 58, 130, 56, 179, 145, 202, 249, 140, 90, 80, 157, 217,
  //         181, 139, 116, 76, 25, 91, 52, 10, 134, 164, 190, 218, 77, 226, 22,
  //         255, 232, 83, 180, 78, 65, 19, 156, 174, 22, 56, 115, 46, 237, 132,
  //         210, 86, 125, 178, 35, 29, 162, 10, 187, 87, 135, 33, 110, 126, 88,
  //         221, 12, 27, 132, 150, 174, 48, 160, 123, 232, 152, 30, 43, 10, 247,
  //         46, 129, 207, 101, 96, 26, 238, 226, 53, 189, 178, 227, 51, 12, 158,
  //         58, 228, 224, 183, 152, 74, 250, 18, 157, 96, 7, 160, 158, 224, 142,
  //         150, 46, 161, 202, 218, 73, 218, 230, 18, 50, 147, 194, 191, 195, 125,
  //         8, 175, 246, 228, 16, 89, 36, 102, 175, 155, 72, 107, 229, 118, 121,
  //         242, 246, 139, 65, 205, 220, 49, 224, 32, 146, 119, 74, 143, 99, 98,
  //         237, 19, 138, 237, 71, 76, 71, 99, 0, 143, 1, 8, 248, 96, 97, 168, 61,
  //         54, 193, 160, 205, 149, 108, 169, 214, 250, 89, 122, 47, 180, 94, 82,
  //         66, 209, 178, 220, 247, 218, 185, 25, 106, 103, 243, 213, 239, 52, 32,
  //         134, 103, 86, 193, 95, 238, 176, 67, 229, 20, 42, 33, 32, 71, 232, 13,
  //         7, 163, 111, 82, 142, 140, 17, 9, 175, 59, 162, 60, 248, 34, 233, 68,
  //         119, 252, 44, 111, 150, 232, 169, 29, 93, 52, 8, 9, 241, 69, 74, 100,
  //         137, 222, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 27, 24, 204, 62, 20, 138,
  //         10, 82, 147, 129, 137, 32, 237, 250, 237, 171, 57, 30, 73, 51, 108,
  //         11, 116, 219, 102, 157, 16, 71, 3, 66, 75, 54, 63, 162, 83, 69, 111,
  //         24, 124, 146, 88, 107, 19, 238, 22, 143, 124, 20, 45, 17, 111, 176,
  //         80, 147, 139, 120, 219, 129, 157, 106, 197, 12, 75, 2, 208, 190, 142,
  //         2, 101, 100, 102, 223, 89, 216, 215, 79, 81, 150, 219, 193, 13, 231,
  //         181, 173, 242, 25, 36, 244, 128, 89, 66, 112, 132, 203, 240, 6, 221,
  //         246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235, 121, 172,
  //         28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133, 126, 255, 0,
  //         169, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241,
  //         127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0,
  //         0, 5, 127, 54, 85, 153, 40, 206, 27, 171, 173, 182, 91, 139, 93, 158,
  //         49, 186, 39, 248, 83, 155, 236, 96, 44, 203, 26, 220, 42, 251, 159,
  //         70, 112, 140, 151, 37, 143, 78, 36, 137, 241, 187, 61, 16, 41, 20,
  //         142, 13, 131, 11, 90, 19, 153, 218, 255, 16, 132, 4, 142, 123, 216,
  //         219, 233, 248, 89, 0, 11, 227, 225, 235, 161, 122, 71, 63, 137, 176,
  //         247, 232, 226, 73, 64, 242, 10, 235, 142, 188, 167, 26, 136, 253, 233,
  //         93, 75, 131, 183, 26, 9, 5, 33, 159, 137, 154, 129, 212, 255, 132,
  //         251, 89, 61, 46, 223, 138, 144, 172, 27, 58, 179, 66, 88, 247, 223,
  //         35, 62, 165, 3, 2, 177, 189, 46, 165, 2, 140, 222, 66, 38, 4, 129,
  //         252, 197, 166, 0, 206, 94, 75, 123, 89, 207, 196, 123, 200, 222, 209,
  //         145, 24, 91, 129, 9, 178, 211, 22, 64, 3, 20, 6, 0, 11, 1, 7, 12, 11,
  //         17, 242, 35, 198, 137, 82, 225, 242, 182, 255, 192, 225, 228, 0, 0, 0,
  //         0, 0, 20, 12, 0, 11, 13, 14, 1, 7, 12, 2, 7, 15, 11, 16, 34, 102, 6,
  //         61, 18, 1, 218, 235, 234, 255, 255, 192, 225, 228, 0, 0, 0, 0, 0, 1,
  //         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 22, 0, 3, 17, 4, 13,
  //         14, 1, 5, 7, 12, 6, 2, 7, 8, 7, 15, 11, 18, 19, 16, 9, 10, 42, 37, 74,
  //         217, 157, 79, 49, 35, 6, 255, 250, 192, 225, 228, 0, 0, 0, 0, 0, 1, 0,
  //         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255,
  //         255, 255, 255,
  //       ],
  //     },
  //     txSigned: {
  //       type: 'Buffer',
  //       data: [
  //         2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187, 176,
  //         183, 33, 199, 246, 103, 187, 37, 95, 189, 7, 202, 80, 97, 12, 250, 3,
  //         144, 162, 226, 246, 21, 49, 133, 165, 219, 76, 93, 53, 43, 175, 90,
  //         111, 44, 94, 64, 76, 225, 24, 47, 147, 162, 232, 94, 38, 76, 145, 91,
  //         113, 136, 255, 129, 124, 15, 97, 207, 75, 5, 173, 226, 64, 119, 9, 2,
  //         1, 9, 21, 123, 187, 201, 72, 90, 130, 225, 124, 191, 62, 91, 50, 208,
  //         50, 122, 180, 112, 176, 28, 78, 207, 240, 74, 119, 215, 51, 13, 137,
  //         200, 133, 224, 94, 5, 127, 54, 85, 153, 40, 206, 27, 171, 173, 182,
  //         91, 139, 93, 158, 49, 186, 39, 248, 83, 155, 236, 96, 44, 203, 26,
  //         220, 42, 251, 159, 70, 112, 208, 146, 192, 147, 72, 35, 88, 51, 253,
  //         232, 207, 29, 209, 159, 176, 124, 253, 186, 119, 218, 146, 118, 237,
  //         87, 4, 152, 7, 2, 58, 64, 6, 168, 8, 175, 246, 228, 16, 89, 36, 102,
  //         175, 155, 72, 107, 229, 118, 121, 242, 246, 139, 65, 205, 220, 49,
  //         224, 32, 146, 119, 74, 143, 99, 98, 237, 19, 227, 214, 7, 109, 105,
  //         18, 113, 26, 107, 82, 42, 67, 123, 134, 189, 15, 185, 205, 209, 18,
  //         210, 200, 70, 223, 5, 206, 37, 77, 97, 186, 35, 253, 84, 171, 220, 1,
  //         64, 113, 155, 43, 241, 243, 143, 58, 130, 56, 179, 145, 202, 249, 140,
  //         90, 80, 157, 217, 181, 139, 116, 76, 25, 91, 52, 10, 134, 164, 190,
  //         218, 77, 226, 22, 255, 232, 83, 180, 78, 65, 19, 156, 174, 22, 56,
  //         115, 46, 237, 132, 210, 86, 125, 178, 35, 29, 162, 10, 187, 87, 135,
  //         33, 110, 126, 88, 221, 12, 27, 132, 150, 174, 48, 160, 123, 232, 152,
  //         30, 43, 10, 247, 46, 129, 207, 101, 96, 26, 238, 226, 53, 189, 178,
  //         227, 51, 12, 158, 58, 228, 224, 183, 152, 74, 250, 18, 157, 96, 7,
  //         160, 158, 224, 142, 150, 46, 161, 202, 218, 73, 218, 230, 18, 50, 147,
  //         194, 191, 195, 125, 138, 237, 71, 76, 71, 99, 0, 143, 1, 8, 248, 96,
  //         97, 168, 61, 54, 193, 160, 205, 149, 108, 169, 214, 250, 89, 122, 47,
  //         180, 94, 82, 66, 209, 178, 220, 247, 218, 185, 25, 106, 103, 243, 213,
  //         239, 52, 32, 134, 103, 86, 193, 95, 238, 176, 67, 229, 20, 42, 33, 32,
  //         71, 232, 13, 7, 163, 111, 82, 142, 140, 17, 9, 175, 59, 162, 60, 248,
  //         34, 233, 68, 119, 252, 44, 111, 150, 232, 169, 29, 93, 52, 8, 9, 241,
  //         69, 74, 100, 137, 222, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 27, 24,
  //         204, 62, 20, 138, 10, 82, 147, 129, 137, 32, 237, 250, 237, 171, 57,
  //         30, 73, 51, 108, 11, 116, 219, 102, 157, 16, 71, 3, 66, 75, 54, 63,
  //         162, 83, 69, 111, 24, 124, 146, 88, 107, 19, 238, 22, 143, 124, 20,
  //         45, 17, 111, 176, 80, 147, 139, 120, 219, 129, 157, 106, 197, 12, 75,
  //         2, 208, 190, 142, 2, 101, 100, 102, 223, 89, 216, 215, 79, 81, 150,
  //         219, 193, 13, 231, 181, 173, 242, 25, 36, 244, 128, 89, 66, 112, 132,
  //         203, 240, 6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70,
  //         206, 235, 121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245,
  //         133, 126, 255, 0, 169, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201,
  //         76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219,
  //         217, 138, 0, 0, 0, 0, 140, 151, 37, 143, 78, 36, 137, 241, 187, 61,
  //         16, 41, 20, 142, 13, 131, 11, 90, 19, 153, 218, 255, 16, 132, 4, 142,
  //         123, 216, 219, 233, 248, 89, 0, 11, 227, 225, 235, 161, 122, 71, 63,
  //         137, 176, 247, 232, 226, 73, 64, 242, 10, 235, 142, 188, 167, 26, 136,
  //         253, 233, 93, 75, 131, 183, 26, 9, 5, 33, 159, 137, 154, 129, 212,
  //         255, 132, 251, 89, 61, 46, 223, 138, 144, 172, 27, 58, 179, 66, 88,
  //         247, 223, 35, 62, 165, 3, 2, 177, 189, 46, 165, 2, 140, 222, 66, 38,
  //         4, 129, 252, 197, 166, 0, 206, 94, 75, 123, 89, 207, 196, 123, 200,
  //         222, 209, 145, 24, 91, 129, 9, 178, 211, 22, 64, 3, 20, 6, 0, 12, 2,
  //         3, 13, 12, 17, 242, 35, 198, 137, 82, 225, 242, 182, 255, 192, 225,
  //         228, 0, 0, 0, 0, 0, 20, 12, 0, 12, 14, 15, 2, 3, 13, 4, 3, 16, 12, 17,
  //         34, 102, 6, 61, 18, 1, 218, 235, 234, 255, 255, 192, 225, 228, 0, 0,
  //         0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 22, 0, 5,
  //         1, 6, 14, 15, 2, 7, 3, 13, 8, 4, 3, 9, 3, 16, 12, 18, 19, 17, 10, 11,
  //         42, 37, 74, 217, 157, 79, 49, 35, 6, 255, 250, 192, 225, 228, 0, 0, 0,
  //         0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255,
  //         255, 255, 255, 255, 255,
  //       ],
  //     },
  //   },
  // };

  // TODO
  // TransactionError
  // Error 0x7d3 = 2003
  // https://stackoverflow.com/questions/68450242/i-want-to-know-causing-a-solana-transfer-error/71450262#71450262
  // https://docs.rs/anchor-lang/0.20.1/anchor_lang/__private/enum.ErrorCode.html

  const tx = response.data.tx;
  if (tx != null) {
    console.log('Transaction', { tx, wallet: provider.wallet });

    // For testing otherwise it gets expensive lol
    const signature = await provider.simulate(
      anchor.web3.Transaction.populate(anchor.web3.Message.from(tx.data)),
    );

    // Sends the MagicEden transaction, paid for and signed by the provider's wallet
    // const signature = await provider.sendAndConfirm(
    //   anchor.web3.Transaction.populate(
    //     anchor.web3.Message.from(Buffer.from(tx.data)),
    //   ),
    // );

    // const transaction = new web3.Transaction();
    // transaction.add(
    //   anchor.web3.Transaction.populate(
    //     anchor.web3.Message.from(tx.data),
    //   ),
    // );
    // const signature = await sendAndConfirmTransaction(conn, transaction, [
    //   userWalletKeypair,
    // ]);

    console.log('Signature: ', signature);
  }
}
